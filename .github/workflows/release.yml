name: Create Release on Push to Main

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  discussions: write
  pull-requests: write
  actions: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli.repo | sudo tee /etc/apt/sources.list.d/github-cli.list
          sudo apt update
          sudo apt install gh

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Read current version from version.txt
        id: get_version
        run: |
          VERSION=$(cat version.txt)
          echo "Current version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Determine version update type
        id: determine_version_update
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Latest commit message: $COMMIT_MSG"

          # Default update type to patch
          VERSION_UPDATE_TYPE="patch"

          # Check if commit message contains "major", "minor", or "patch"
          if [[ "$COMMIT_MSG" == *"major"* || "$COMMIT_MSG" == *"BREAKING CHANGE"* ]]; then
            VERSION_UPDATE_TYPE="major"
          elif [[ "$COMMIT_MSG" == *"new feature"* ]]; then  # Custom trigger for minor version update
            VERSION_UPDATE_TYPE="minor"
          elif [[ "$COMMIT_MSG" == *"patch"* ]]; then
            VERSION_UPDATE_TYPE="patch"
          fi

          echo "Version update type: $VERSION_UPDATE_TYPE"
          echo "VERSION_UPDATE_TYPE=$VERSION_UPDATE_TYPE" >> $GITHUB_ENV

      - name: Increment version based on update type
        id: increment_version
        run: |
          VERSION=${{ env.VERSION }}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"

          # Ensure version parts are correctly split
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          case "${{ env.VERSION_UPDATE_TYPE }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update version.txt
        run: |
          echo "${{ env.NEW_VERSION }}" > version.txt
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add version.txt
          git commit -m "Update version to ${{ env.NEW_VERSION }}"
          git push

      - name: Track commits until trigger word
        id: track_commits
        run: |
          # Initialize an empty array for commit messages
          COMMITS=()

          # Check the last commit message and collect commits until the trigger is found
          while true; do
            COMMIT_MSG=$(git log -1 --pretty=%B)
            echo "Checking commit message: $COMMIT_MSG"

            # Add current commit to the list
            COMMITS+=("$COMMIT_MSG")

            # Break the loop if a commit with a trigger word is found
            if [[ "$COMMIT_MSG" == *"major"* || "$COMMIT_MSG" == *"minor"* || "$COMMIT_MSG" == *"patch"* || "$COMMIT_MSG" == *"BREAKING CHANGE"* ]]; then
              break
            fi

            # Go to the previous commit
            git reset --hard HEAD^
          done

          echo "Collected commits:"
          echo "${COMMITS[@]}"

          # Save the collected commit messages in the environment for later use
          echo "COMMITS=$(echo "${COMMITS[@]}" | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Generate changelog
        id: changelog
        run: |
          # Start the changelog with the version info
          echo "## Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### v${{ env.NEW_VERSION }}" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Add all tracked commits to the changelog
          echo "${{ env.COMMITS }}" >> CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "Add changelog for v${{ env.NEW_VERSION }}"
          git push

      - name: Zip the distribution folder
        run: |
          zip -r distribution-${{ env.NEW_VERSION }}.zip . -i distribution/*
          echo "Zipped distribution folder to distribution-${{ env.NEW_VERSION }}.zip"

      - name: Create GitHub release with zipped distribution
        id: create_release
        run: |
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Create GitHub release
          gh release create "v${{ env.NEW_VERSION }}" \
            --title "Release v${{ env.NEW_VERSION }}" \
            --notes "$(cat CHANGELOG.md)\n\nCommit message: $COMMIT_MSG" \
            "distribution-${{ env.NEW_VERSION }}.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
