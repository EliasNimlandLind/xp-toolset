name: Create Release on Push to Main

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  discussions: write
  pull-requests: write
  actions: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli.repo | sudo tee /etc/apt/sources.list.d/github-cli.list
          sudo apt update
          sudo apt install gh

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Read current version from version.txt
        id: get_version
        run: |
          VERSION=$(cat version.txt)
          echo "Current version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Determine version update type
        id: determine_version_update
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Latest commit message: $COMMIT_MSG"

          # Default update type to patch
          VERSION_UPDATE_TYPE="patch"

          # Check if commit message contains "major", "minor", or "patch"
          if [[ "$COMMIT_MSG" == *"major"* || "$COMMIT_MSG" == *"BREAKING CHANGE"* ]]; then
            VERSION_UPDATE_TYPE="major"
          elif [[ "$COMMIT_MSG" == *"new feature"* ]]; then  # Custom trigger for minor version update
            VERSION_UPDATE_TYPE="minor"
          elif [[ "$COMMIT_MSG" == *"patch"* ]]; then
            VERSION_UPDATE_TYPE="patch"
          fi

          echo "Version update type: $VERSION_UPDATE_TYPE"
          echo "VERSION_UPDATE_TYPE=$VERSION_UPDATE_TYPE" >> $GITHUB_ENV

      - name: Increment version based on update type
        id: increment_version
        run: |
          VERSION=${{ env.VERSION }}
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"

          # Ensure version parts are correctly split
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          case "${{ env.VERSION_UPDATE_TYPE }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update version.txt
        run: |
          echo "${{ env.NEW_VERSION }}" > version.txt
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add version.txt
          git commit -m "Update version to ${{ env.NEW_VERSION }}"
          git push

      - name: Generate changelog
        id: changelog
        run: |
          # Check if there are any tags
          TAG_COUNT=$(git tag | wc -l)
          if [ "$TAG_COUNT" -eq 0 ]; then
            echo "No tags found, generating changelog from all commits"
            # If no tags exist (first release), generate changelog from all commits
            CHANGELOG=$(git log --oneline)
          else
            # Get the previous tag (last release) and generate a changelog from it
            PREVIOUS_TAG=$(git describe --tags --abbrev=0)
            echo "Previous release tag: $PREVIOUS_TAG"

            # Generate changelog from the last release to the current commit
            CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --oneline)
          fi
          echo "Generated changelog:"
          echo "$CHANGELOG"

          # Write changelog to a CHANGELOG.md file
          echo "## Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### v${{ env.NEW_VERSION }}" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$CHANGELOG" >> CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "Add changelog for v${{ env.NEW_VERSION }}"
          git push

      - name: Zip the distribution folder
        run: |
          zip -r distribution-${{ env.NEW_VERSION }}.zip distribution/
          echo "Zipped distribution folder to distribution-${{ env.NEW_VERSION }}.zip"

      - name: Create GitHub release with zipped distribution
        id: create_release
        run: |
          gh release create "v${{ env.NEW_VERSION }}" --title "Release v${{ env.NEW_VERSION }}" --notes "$(cat CHANGELOG.md)" "distribution-${{ env.NEW_VERSION }}.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
